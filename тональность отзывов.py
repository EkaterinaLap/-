# -*- coding: utf-8 -*-
"""тональность.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mcdgJEVbw3PIk_8_ssj1i1iLuzLAOkGf
"""

# Загружаем необходимые библиотеки и модули для анализа тональности текста
import re
import torch
from transformers import AutoModelForSequenceClassification, BertTokenizerFast
import pandas as pd
from nltk.corpus import stopwords
from nltk import download
# Загружаем набор стоп-слов
download('stopwords')
# Выполняем предварительную обработку текста для анализа
def preprocess_text(text):
    text = re.sub(r'[^а-яА-ЯёЁa-zA-Z0-9\s]', '', text)
    text = text.lower()
    stop_words = set(stopwords.words('russian'))
    words = text.split()
    words = [word for word in words if word not in stop_words]
    return ' '.join(words)
# Читаем отзывы из текстового файла
def read_reviews_from_txt(filename):
    with open(filename, "r", encoding="utf-8") as file:
        reviews = file.readlines()
    return [review.strip() for review in reviews]
# Загрузка модели и токенизатора для русского языка
model_name = "blanchefort/rubert-base-cased-sentiment"
tokenizer = BertTokenizerFast.from_pretrained(model_name)
model = AutoModelForSequenceClassification.from_pretrained(model_name)
# Прогнозируем тональность текста
def predict_sentiment(text):
    text = preprocess_text(text)
    inputs = tokenizer(text, max_length=512, padding=True, truncation=True, return_tensors='pt')
    outputs = model(**inputs)
    probabilities = torch.nn.functional.softmax(outputs.logits, dim=1).squeeze()
    predicted_index = torch.argmax(probabilities).item()
    return probabilities.tolist(), predicted_index
# Читаем отзывы из текстового файла и сохраняем их в переменной
reviews = read_reviews_from_txt("texts.txt")
# Создание пустого списка для результатов
results = []
for review in reviews:
    probabilities, predicted_index = predict_sentiment(review)
    results.append({
        "content": review,
        "grade3": {0: "Нейтральная", 1: "Позитивная", 2: "Негативная"}[predicted_index],
        "prediction": predicted_index
    })
# Преобразование списка результатов в датафрейм
df = pd.DataFrame(results)
# Вывод датафрейма на экран
print(df)